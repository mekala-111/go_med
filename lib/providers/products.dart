import 'dart:convert';

import '../providers/auth_provider.dart';
import 'package:http/http.dart' as http;
import '../utils/gomed_api.dart';
import '../model/product_state.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../model/login_auth_state.dart';
import '../states/auth_state.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../model/product_state.dart';
import '../providers/loader.dart';
import 'package:http/retry.dart';

class ProductProvider extends StateNotifier<Autogenerated> {
  final Ref ref; // To access other providers
  ProductProvider(this.ref) : super((Autogenerated()));

  // final loadingState = ref.read(loadingProvider.notifier);
  // Function to add a product and handle the response
  Future<void> addProduct(
    String? productName,
    String? description,
    double? price,
    String category,
  ) async {
    final loadingState = ref.read(loadingProvider.notifier);

    try {
      loadingState.state = true;
      // Retrieve the token from SharedPreferences
      final prefs = await SharedPreferences.getInstance();
      String? token = prefs.getString('authToken');

      if (token == null || token.isEmpty) {
        print('User token is missing. Redirecting to log in.');
        throw Exception("User token is missing. Please log in again.");
      }

      print('Retrieved Token: $token');

      // Initialize RetryClient for handling retries
      final client = RetryClient(
        http.Client(),
        retries: 3, // Retry up to 3 times
        when: (response) =>
            response.statusCode == 401, // Retry on 401 Unauthorized
        onRetry: (req, res, retryCount) async {
          if (retryCount == 0 && res?.statusCode == 401) {
            // Handle token restoration logic on the first retry
            String? newAccessToken =
                await ref.read(loginProvider.notifier).restoreAccessToken();
            print('Restored Token: $newAccessToken');
            req.headers['Authorization'] = 'Bearer $newAccessToken';
          }
        },
      );

      // Make the API request
      final response = await client.post(
        Uri.parse(Bbapi.add),
        headers: {
          "Content-Type": "application/json",
          "Authorization": "Bearer $token",
        },
        body: jsonEncode(
          {
            "productName": productName,
            "productDescription": description,
            "price": price,
            "category": category,
          },
        ),
      );

      // Handle response
      if (response.statusCode == 201) {
        print("Product added successfully!");
        getProducts();
      } else {
        final errorBody = jsonDecode(response.body);
        final errorMessage =
            errorBody['message'] ?? 'Unexpected error occurred.';
        print("Error occurred while adding product: $errorMessage");
        throw Exception("Error adding product: $errorMessage");
      }
    } catch (error) {
      print("Failed to add product: $error");
      rethrow; // Re-throw the error to handle it in the calling function
    } finally {
      // Reset loading state to false
      loadingState.state = false;
    }
  }

  Future<void> getProducts() async {
    final loadingState = ref.read(loadingProvider.notifier);
    try {
      final prefs = await SharedPreferences.getInstance();
      final String? token = prefs.getString('authToken');
      print('token printed succesflutyy...................$token');

      if (token == null || token.isEmpty) {
        throw Exception("User token is missing. Please log in again.");
      }
      loadingState.state = true; // Show loading state
      final client = RetryClient(
        http.Client(),
        retries: 4,
        when: (response) {
          return response.statusCode == 401 || response.statusCode == 400
              ? true
              : false;
        },
        onRetry: (req, res, retryCount) async {
          if (retryCount == 0 && res?.statusCode == 401 ||
              res?.statusCode == 400) {
            // Here, handle your token restoration logic
            // You can access other providers using ref.read if needed
            String? accessToken =
                await ref.read(loginProvider.notifier).restoreAccessToken();

            //print(accessToken); // Replace with actual token restoration logic
            req.headers['Authorization'] = "Bearer $accessToken";
          }
        },
      );

      final response = await client.get(
        Uri.parse(Bbapi.getProduct),
        headers: {
          'Content-Type': 'application/json',
          "Authorization": "Bearer $token",
        },
      ).timeout(const Duration(seconds: 10)); // Adding timeout to the request

      if (response.statusCode == 200 || response.statusCode == 201) {
        try {
          // Attempt to parse the response body
          final Map<String, dynamic> res = json.decode(response.body);
          final productData = Autogenerated.fromJson(res);

          if (productData.data == null || productData.data!.isEmpty) {
            throw Exception("No products found.");
          }

          // Update state with the fetched data
          state = productData;
          print("Products fetched successfully: ${productData.toJson()}");
        } catch (jsonError) {
          print("Error parsing response JSON: $jsonError");
          throw Exception("Invalid response format.");
        }
      } else {
        // Parse error response if possible
        try {
          final Map<String, dynamic> errorBody = jsonDecode(response.body);
          final errorMessage =
              errorBody['message'] ?? "Unexpected error occurred.";
          throw Exception("Error fetching products: $errorMessage");
        } catch (parseError) {
          throw Exception(
              "Error fetching products: Unable to parse error response.");
        }
      }
    } catch (e, stackTrace) {
      print("Error fetching products: $e");
      print("StackTrace: $stackTrace");
      throw Exception("Error fetching products: $e");
    } finally {
      // Reset loading state
      loadingState.state = false;
    }
  }

  Future<bool> updateProduct(
    String? productName,
    String? description,
    double? price,
    String? category,
    String? productId,
  ) async {
    final loadingState = ref.read(loadingProvider.notifier);
    print(
        'peoductName$productName,price$price,description$description,category$category,productId$productId');
    const String apiUrl = Bbapi.update;

    try {
      final prefs = await SharedPreferences.getInstance();
      String? token = prefs.getString('authToken');

      if (token == null || token.isEmpty) {
        throw Exception("User token is missing. Please log in again.");
      }
      loadingState.state = true; // Show loading state
      final client = RetryClient(
        http.Client(),
        retries: 4,
        when: (response) {
          return response.statusCode == 401 || response.statusCode == 404
              ? true
              : false;
        },
        onRetry: (req, res, retryCount) async {
          if (retryCount == 0 && res?.statusCode == 401 ||
              res?.statusCode == 404) {
            // Here, handle your token restoration logic
            // You can access other providers using ref.read if needed
            var accessToken =
                await ref.watch(loginProvider.notifier).restoreAccessToken();

            //print(accessToken); // Replace with actual token restoration logic
            req.headers['Authorization'] = 'Bearer $accessToken';
          }
        },
      );
      print('update url $apiUrl/$productId');
      final response = await client.put(
        Uri.parse("$apiUrl/$productId"),
        headers: {
          "Content-Type": "application/json",
          "Authorization": "Bearer $token",
        },
        body: jsonEncode({
          "productName": productName,
          "price": price,
          "productDescription": description,
          "category": category,
        }),
      );
      print('statuscode${response.statusCode}');
      print('responcebody${response.body}');
      if (response.statusCode == 200 || response.statusCode == 201) {
        print("Product updated successfully!");
        getProducts();
        return true;
      } else {
        final errorBody = jsonDecode(response.body);
        throw Exception(
            "Error updating product: ${errorBody['message'] ?? 'Unexpected error occurred.'}");
      }
    } catch (error) {
      throw Exception("Error updating product: $error");
    }
  }

  Future<bool> deleteProduct(String? productId) async {
    final loadingState = ref.read(loadingProvider.notifier);
    const String apiUrl = Bbapi.delete;

    try {
      final prefs = await SharedPreferences.getInstance();
      String? token = prefs.getString('authToken');

      if (token == null || token.isEmpty) {
        throw Exception("User token is missing. Please log in again.");
      }
      loadingState.state = true; // Show loading state
      final client = RetryClient(
        http.Client(),
        retries: 4,
        when: (response) {
          return response.statusCode == 401 || response.statusCode == 400
              ? true
              : false;
        },
        onRetry: (req, res, retryCount) async {
          if (retryCount == 0 && res?.statusCode == 401 ||
              res?.statusCode == 400) {
            // Here, handle your token restoration logic
            // You can access other providers using ref.read if needed
            var accessToken =
                await ref.watch(loginProvider.notifier).restoreAccessToken();

            //print(accessToken); // Replace with actual token restoration logic
            req.headers['Authorization'] = 'Bearer $accessToken';
          }
        },
      );

      final response = await client.delete(
        Uri.parse("$apiUrl/$productId"),
        headers: {
          "Authorization": "Bearer $token",
        },
      );

      if (response.statusCode == 200 || response.statusCode == 201) {
        print("Product deleted successfully!");
        getProducts();
        return true;
      } else {
        final errorBody = jsonDecode(response.body);
        throw Exception(
            "Error deleting product: ${errorBody['message'] ?? 'Unexpected error occurred.'}");
      }
    } catch (error) {
      throw Exception("Error deleting product: $error");
    }
  }
}

// Define productProvider with ref
final productProvider =
    StateNotifierProvider<ProductProvider, Autogenerated>((ref) {
  return ProductProvider(ref);
});
